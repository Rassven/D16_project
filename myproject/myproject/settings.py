"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
# Приватные настройки вынесены в mconfig.py ("в комплект не входит", "в комплекте" файл _mconfig.py с пустыми полями)
from .mconfig import config  # import my config (keys, passwords, settings, mail's, ...)
# SuperUser name: Admin, SuperUser password: 1234

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # myproject:
    'django.contrib.sites',
    'django.contrib.flatpages',
    'fpages',
    'django_filters',
    # для "allauth"
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',

    # my apps:
    'accounts',
    'adboard',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # flatpages:
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',  # оно надо?
    # для "allauth"
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',  # нужно для "allauth"
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# для "allauth"
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
USE_I18N = True

TIME_ZONE = config['TIME_ZONE']
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / "static"]


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# LOGOUT_URL = "/accounts/logout/"
# LOGOUT_URL = "/adboard/welcome"
# LOGIN_URL = "/adboard/mypage"
LOGIN_REDIRECT_URL = "/accounts/mypage"
LOGOUT_REDIRECT_URL = "/"


ACCOUNT_EMAIL_REQUIRED = config['ACCOUNT_EMAIL_REQUIRED']
ACCOUNT_UNIQUE_EMAIL = config['ACCOUNT_UNIQUE_EMAIL']
ACCOUNT_USERNAME_REQUIRED = config['ACCOUNT_USERNAME_REQUIRED']
ACCOUNT_AUTHENTICATION_METHOD = config['ACCOUNT_AUTHENTICATION_METHOD']
ACCOUNT_EMAIL_VERIFICATION = config['ACCOUNT_EMAIL_VERIFICATION']
ACCOUNT_CONFIRM_EMAIL_ON_GET = True  # активирует аккаунт сразу, как только мы перейдём по ссылке.
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = None  # Количество неудачных попыток входа в систему. 'None' - отключить ограничение.
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300  # секунд запрета на вход посте N неудачных попыток.

ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignupForm"}

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # вывод отправляемого в консоль (Terminal)
# EMAIL_BACKEND =config['EMAIL_BACKEND']
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = config['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = config['EMAIL_HOST_PASSWORD']
EMAIL_USE_TLS = config['EMAIL_USE_TLS']
EMAIL_USE_SSL = config['EMAIL_USE_SSL']
EMAIL_SUBJECT_PREFIX = 'Ad Board: '  # EMAIL_SUBJECT_PREFIX = '[Django]'  # Префикс темы письма (managers & admins).
DEFAULT_FROM_EMAIL = config['DEFAULT_FROM_EMAIL']  # Будет отображаться в поле «отправитель» у получателя письма.
SERVER_EMAIL = config['SERVER_EMAIL']
# MANAGERS = (config['MANAGERS'],)  # Не те менеджеры, что созданы под Админкой.
ADMINS = (config['ADMINS'],)
